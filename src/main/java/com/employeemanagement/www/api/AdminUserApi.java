/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0-beta).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.employeemanagement.www.api;

import com.employeemanagement.www.model.AdminUserSignIn;
import com.employeemanagement.www.model.AdminUserSignUp;
import com.employeemanagement.www.model.Error;
import com.employeemanagement.www.model.Token;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-04T22:21:26.089-05:00[America/Chicago]")
@Validated
@Tag(name = "adminUser", description = "the adminUser API")
public interface AdminUserApi {

    default AdminUserApiDelegate getDelegate() {
        return new AdminUserApiDelegate() {};
    }

    /**
     * POST /adminUser/signIn
     * To signin as an admin user
     *
     * @param adminUserSignIn Admin User SignIn Request (optional)
     * @return Admin user signed in successfully (status code 200)
     *         or Error in signin (status code 400)
     */
    @Operation(
        operationId = "adminUserSignIn",
        responses = {
            @ApiResponse(responseCode = "200", description = "Admin user signed in successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Token.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error in signin", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/adminUser/signIn",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Token> adminUserSignIn(
        @Parameter(name = "AdminUserSignIn", description = "Admin User SignIn Request") @Valid @RequestBody(required = false) AdminUserSignIn adminUserSignIn
    ) {
        return getDelegate().adminUserSignIn(adminUserSignIn);
    }


    /**
     * POST /adminUser/signUp
     * To signup a new admin user
     *
     * @param adminUserSignUp Admin User SignUp Request (optional)
     * @return Successfully signedup an admin user (status code 200)
     *         or Error in siging up an admin user (status code 400)
     */
    @Operation(
        operationId = "adminUserSignUp",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully signedup an admin user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AdminUserSignUp.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error in siging up an admin user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/adminUser/signUp",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AdminUserSignUp> adminUserSignUp(
        @Parameter(name = "AdminUserSignUp", description = "Admin User SignUp Request") @Valid @RequestBody(required = false) AdminUserSignUp adminUserSignUp
    ) {
        return getDelegate().adminUserSignUp(adminUserSignUp);
    }

}
