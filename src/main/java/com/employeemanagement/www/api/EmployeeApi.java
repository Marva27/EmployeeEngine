/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0-beta).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.employeemanagement.www.api;

import java.math.BigDecimal;
import com.employeemanagement.www.model.Employee;
import com.employeemanagement.www.model.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-04T22:21:26.089-05:00[America/Chicago]")
@Validated
@Tag(name = "employee", description = "the employee API")
public interface EmployeeApi {

    default EmployeeApiDelegate getDelegate() {
        return new EmployeeApiDelegate() {};
    }

    /**
     * POST /employee/add
     * To add a new employee
     *
     * @param employee Structure of an Employee (optional)
     * @return Employee added successfully (status code 200)
     *         or Error in adding employee (status code 400)
     */
    @Operation(
        operationId = "addNewEmployee",
        responses = {
            @ApiResponse(responseCode = "200", description = "Employee added successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Employee.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error in adding employee", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/employee/add",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Employee> addNewEmployee(
        @Parameter(name = "Employee", description = "Structure of an Employee") @Valid @RequestBody(required = false) Employee employee
    ) {
        return getDelegate().addNewEmployee(employee);
    }


    /**
     * DELETE /employee/{employeeId}
     * To delete an existing employee
     *
     * @param employeeId  (required)
     * @return Employee not found (status code 404)
     */
    @Operation(
        operationId = "deleteExistingEmployee",
        responses = {
            @ApiResponse(responseCode = "404", description = "Employee not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/employee/{employeeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteExistingEmployee(
        @Parameter(name = "employeeId", description = "", required = true) @PathVariable("employeeId") BigDecimal employeeId
    ) {
        return getDelegate().deleteExistingEmployee(employeeId);
    }


    /**
     * GET /employee/{employeeId}
     * To get an existing employee
     *
     * @param employeeId  (required)
     * @return Employee retrieved successfully (status code 200)
     *         or Employee not found (status code 404)
     */
    @Operation(
        operationId = "getExistingEmployee",
        responses = {
            @ApiResponse(responseCode = "200", description = "Employee retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Employee.class))
            }),
            @ApiResponse(responseCode = "404", description = "Employee not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employee/{employeeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Employee> getExistingEmployee(
        @Parameter(name = "employeeId", description = "", required = true) @PathVariable("employeeId") BigDecimal employeeId
    ) {
        return getDelegate().getExistingEmployee(employeeId);
    }


    /**
     * PUT /employee/{employeeId}
     * To update an exisitng employee
     *
     * @param employeeId  (required)
     * @param employee Structure of an Employee (optional)
     * @return Employee updated successfully (status code 200)
     *         or Error in updating employee (status code 400)
     *         or Employee not found (status code 404)
     */
    @Operation(
        operationId = "updateExistingEmployee",
        responses = {
            @ApiResponse(responseCode = "200", description = "Employee updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Employee.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error in updating employee", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Employee not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/employee/{employeeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Employee> updateExistingEmployee(
        @Parameter(name = "employeeId", description = "", required = true) @PathVariable("employeeId") BigDecimal employeeId,
        @Parameter(name = "Employee", description = "Structure of an Employee") @Valid @RequestBody(required = false) Employee employee
    ) {
        return getDelegate().updateExistingEmployee(employeeId, employee);
    }

}
